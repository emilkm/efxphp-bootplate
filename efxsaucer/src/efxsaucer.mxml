<?xml version="1.0" encoding="utf-8"?>
<s:Application width="100%" height="100%"
			   xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   initialize = "initializeHandler();"
			   applicationComplete="creationCompleteHandler()"
>
<fx:Declarations>
	<!-- Place non-visual elements (e.g., services, value objects) here -->
</fx:Declarations>
<fx:Script>
<![CDATA[
	import emilkm.efx.AMFService;
	import emilkm.efx.ChannelConfig;
	import emilkm.efxphp.Response;
	
	import mx.core.FlexGlobals;
	import mx.rpc.AbstractOperation;
	import mx.rpc.AsyncResponder;
	import mx.rpc.AsyncToken;
	import mx.rpc.events.FaultEvent;
	import mx.rpc.events.ResultEvent;
	import mx.rpc.remoting.RemoteObject;
	
	public var channelConfig:ChannelConfig;
	public var amfService:AMFService;
	
	public function addClassAlias(a:String, c:Class):void
	{
		try
		{
			getClassByAlias(a);
		}
		catch (err:Error)
		{
			registerClassAlias(a, c);
		}
	}
	
	public function get rootUrl():String
	{
		var url:String = FlexGlobals.topLevelApplication.url;
		var root:String;
		
		if (url.indexOf('http') != -1 || url.indexOf('https') != -1)
			root = url.substr(0, url.lastIndexOf('/')) + '/';
		else
			root = 'http://localhost/5618/efxphp-bootplate/';
		return root;
	}
	
	public function get endpoint():String
	{
		return rootUrl + 'server/index.php';
	}
	
	private function initializeHandler():void
	{
		channelConfig = new ChannelConfig(this.endpoint, 7, 300);
		amfService = new AMFService('myapp.server.MyService', ChannelConfig.DEFAULT_CHANNEL_ID, channelConfig.channelSet);
	}
	
	private function creationCompleteHandler():void
	{
		amfService.send('init', null, new AsyncResponder(initResult, faultEvent));
		amfService.send('publicMethodNoParams', null, new AsyncResponder(publicMethodNoParamsResult, faultEvent));
		amfService.send('publicMethodOptionalParam', null, new AsyncResponder(publicMethodOptionalParamResult, faultEvent));
		amfService.send('publicMethodMandatoryParam', [1], new AsyncResponder(publicMethodMandatoryParamResult, faultEvent));
	}
	
	private function faultEvent(response:Response, token:Object = null):void
	{
		trace('fault');
	}
	
	private function initResult(response:Response, token:Object = null):void
	{
		trace('initResult');
		channelConfig.sid = response.data as String;
	}
	
	private function publicMethodNoParamsResult(response:Response, token:Object = null):void
	{
		trace('publicMethodNoParamsResult');
	}
	
	private function publicMethodOptionalParamResult(response:Response, token:Object = null):void
	{
		trace('publicMethodOptionalParamResult');
	}
	
	private function publicMethodMandatoryParamResult(response:Response, token:Object = null):void
	{
		trace('publicMethodMandatoryParamResult');
	}
]]>
</fx:Script>
	<s:Label>
		done
	</s:Label>
</s:Application>
